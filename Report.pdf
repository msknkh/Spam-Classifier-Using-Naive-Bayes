{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "from sklearn.metrics import recall_score, precision_score, f1_score, confusion_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "DATA_JSON_FILE = 'SpamData/01_Processing/email-text-data.json'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_json(DATA_JSON_FILE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CATEGORY</th>\n",
       "      <th>MESSAGE</th>\n",
       "      <th>FILE_NAME</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>1</td>\n",
       "      <td>This is a multi-part message in MIME format.\\n...</td>\n",
       "      <td>00208.c9e30fc9044cdc50682c2e2d2be4c466</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>1</td>\n",
       "      <td>I have been receiving emails saying that I'm c...</td>\n",
       "      <td>00237.0faf46ae2bfab24f0464c4a1a0425659</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>1</td>\n",
       "      <td>This is a multi-part message in MIME format.\\n...</td>\n",
       "      <td>00224.1b3430b101a8a8b22493c4948fcbe9cc</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>1</td>\n",
       "      <td>&lt;html&gt;\\n\\n&lt;head&gt;\\n\\n&lt;title&gt;mailv05a.gif&lt;/title...</td>\n",
       "      <td>01381.7f1f9f4b8ea24fee6b87dc1172177eaf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>1</td>\n",
       "      <td>Dear,sir\\n\\n \\n\\nI am Chief Tony Anenih,the mi...</td>\n",
       "      <td>00612.cd362b97ee34d41e72a66ed5199dd62e</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     CATEGORY                                            MESSAGE  \\\n",
       "995         1  This is a multi-part message in MIME format.\\n...   \n",
       "996         1  I have been receiving emails saying that I'm c...   \n",
       "997         1  This is a multi-part message in MIME format.\\n...   \n",
       "998         1  <html>\\n\\n<head>\\n\\n<title>mailv05a.gif</title...   \n",
       "999         1  Dear,sir\\n\\n \\n\\nI am Chief Tony Anenih,the mi...   \n",
       "\n",
       "                                  FILE_NAME  \n",
       "995  00208.c9e30fc9044cdc50682c2e2d2be4c466  \n",
       "996  00237.0faf46ae2bfab24f0464c4a1a0425659  \n",
       "997  00224.1b3430b101a8a8b22493c4948fcbe9cc  \n",
       "998  01381.7f1f9f4b8ea24fee6b87dc1172177eaf  \n",
       "999  00612.cd362b97ee34d41e72a66ed5199dd62e  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5796, 3)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "data.sort_index(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CATEGORY</th>\n",
       "      <th>MESSAGE</th>\n",
       "      <th>FILE_NAME</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5791</th>\n",
       "      <td>0</td>\n",
       "      <td>On Tue, Jul 30, 2002 at 11:28:11AM +0200, Davi...</td>\n",
       "      <td>00154.7bda4738681c601e0fd93f3c6d1ae4a1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5792</th>\n",
       "      <td>0</td>\n",
       "      <td>Paul, my apologies for being irritable on the ...</td>\n",
       "      <td>00363.2c66a99268facef9c5dab8c1f7b81190</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5793</th>\n",
       "      <td>0</td>\n",
       "      <td>Yes indeed - there should be an agents directo...</td>\n",
       "      <td>00449.9272eb34ed6d02f46e34bd7300d9e7d8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5794</th>\n",
       "      <td>0</td>\n",
       "      <td>There's been some discussion just now on the I...</td>\n",
       "      <td>00062.43847c613a539ca9c47b4593ee34bd6d</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5795</th>\n",
       "      <td>0</td>\n",
       "      <td>On Fri, 2002-07-26 at 12:49, Ian Andrew Bell w...</td>\n",
       "      <td>00912.74b435accaf4e65a948c7769b6380f01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      CATEGORY                                            MESSAGE  \\\n",
       "5791         0  On Tue, Jul 30, 2002 at 11:28:11AM +0200, Davi...   \n",
       "5792         0  Paul, my apologies for being irritable on the ...   \n",
       "5793         0  Yes indeed - there should be an agents directo...   \n",
       "5794         0  There's been some discussion just now on the I...   \n",
       "5795         0  On Fri, 2002-07-26 at 12:49, Ian Andrew Bell w...   \n",
       "\n",
       "                                   FILE_NAME  \n",
       "5791  00154.7bda4738681c601e0fd93f3c6d1ae4a1  \n",
       "5792  00363.2c66a99268facef9c5dab8c1f7b81190  \n",
       "5793  00449.9272eb34ed6d02f46e34bd7300d9e7d8  \n",
       "5794  00062.43847c613a539ca9c47b4593ee34bd6d  \n",
       "5795  00912.74b435accaf4e65a948c7769b6380f01  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "vectorizer = CountVectorizer(stop_words='english')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_features = vectorizer.fit_transform(data.MESSAGE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5796, 102694)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_features.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(vectorizer.vocabulary_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(all_features, data.CATEGORY, test_size=0.3, random_state=88)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4057, 102694)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1739, 102694)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "classifiers = {'Naive Bayes': MultinomialNB(), 'Decision Tree':DecisionTreeClassifier(random_state=0),'Support vector Machine':SVC(gamma='auto')}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Naive Bayes classifier\n",
      "Score: 0.9361702127659575\n",
      "Recall: 0.8068592057761733\n",
      "Precision score: 0.991130820399113\n",
      "F1 score: 0.8895522388059702\n",
      "[[1181    4]\n",
      " [ 107  447]]\n",
      "\n",
      "Decision Tree classifier\n",
      "Score: 0.9620471535365153\n",
      "Recall: 0.9494584837545126\n",
      "Precision score: 0.9326241134751773\n",
      "F1 score: 0.9409660107334527\n",
      "[[1147   38]\n",
      " [  28  526]]\n",
      "\n",
      "Support vector Machine classifier\n",
      "Score: 0.8320874065554916\n",
      "Recall: 0.47653429602888087\n",
      "Precision score: 0.9924812030075187\n",
      "F1 score: 0.6439024390243903\n",
      "[[1183    2]\n",
      " [ 290  264]]\n"
     ]
    }
   ],
   "source": [
    "for key, value in classifiers.items():\n",
    "        classifier = value\n",
    "        classifier.fit(X_train, y_train)\n",
    "        mean_accuracy = classifier.score(X_test, y_test)\n",
    "        recall = recall_score(y_test, classifier.predict(X_test))\n",
    "        precision = precision_score(y_test, classifier.predict(X_test))\n",
    "        f1 = f1_score(y_test, classifier.predict(X_test))\n",
    "        print()\n",
    "        print('{} classifier'.format(key))\n",
    "        print('Score: {}'.format(mean_accuracy))\n",
    "        print('Recall: {}'.format(recall))\n",
    "        print('Precision score: {}'.format(precision))\n",
    "        print('F1 score: {}'.format(f1))\n",
    "        cf = confusion_matrix(y_test, classifier.predict(X_test))\n",
    "        print(cf)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
